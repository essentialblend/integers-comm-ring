module integers_MAIN.properties.ring_proof.group where

open import constructs.type_variables

open import predicate_logic.definitions

open import natural_numbers.definition

open import integers_MAIN.definition
open import integers_MAIN.operations

open import integers_MAIN.properties.addition.neutralities
open import integers_MAIN.properties.addition.commutativity
open import integers_MAIN.properties.addition.associativity
open import integers_MAIN.properties.addition.inverses

open import integers_MAIN.properties.multiplication.neutralities
open import integers_MAIN.properties.multiplication.commutativity
open import integers_MAIN.properties.multiplication.associativity


-- Record-type: Monoid
record IsMonoidℤ
  (e : A) (identityFunction : A → A) (_∙_ : A → A → A) : prop where
    field
      -- Left Neutrality.
      leftNeutrality  : {x : A} → (e ∙ x) ≡ identityFunction x
      -- Right Neutrality.
      rightNeutrality : {x : A} → (x ∙ e) ≡ identityFunction x
      -- Associativity.
      associativity   : {x y z : A} → ((x ∙ y) ∙ z) ≡ (x ∙ (y ∙ z))

-- Record-type: Commutative Monoid
record IsCommMonoidℤ
  (e : A) (identityFunction : A → A) (_∙_ : A → A → A) : prop where
    field
      -- Is Monoid
      isMonoidℤ  : IsMonoidℤ (e) (identityFunction) (_∙_)
      -- Commutativity
      commutativity : {x y : A} → (x ∙ y) ≡ (y ∙ x)

-- i- Addition Monoid Proofs 
-- Proof: Addition with pos 0 is a monoid.
ℤadditionIsMonoid : IsMonoidℤ (pos zero) (idℤ) (_+_)
ℤadditionIsMonoid = record {
  -- Proof for left neutrality.
  leftNeutrality = λ {x} → leftNeutrality+ℤ+ x;
  -- Proof for right neutrality.
  rightNeutrality = λ {x} → rightNeutrality+ℤ+ x;
  -- Proof for Associativity
  associativity = λ {x} {y} {z} → associativityℤ+ x y {z} }

-- Addition with pos 0 is a commutative monoid.
ℤadditionIsCommMonoid : IsCommMonoidℤ (pos zero) (idℤ) (_+_)
ℤadditionIsCommMonoid = record {
  -- Proof for monoid.
  isMonoidℤ = ℤadditionIsMonoid;
  -- Proof for commutativity.
  commutativity = λ {x} {y} → commutativityℤ+ x {y}}

-- ii- Multiplication  Monoid Proofs 

-- Multiplication with pos 1 is a monoid.
ℤmultiplicationIsMonoid : IsMonoidℤ (pos 1) (idℤ) (_*_)
ℤmultiplicationIsMonoid = record {
  -- Proof for left neutrality.
  leftNeutrality = λ {x} → leftNeutralityℤ* x;
  -- Proof for right neutrality.
  rightNeutrality = λ {x} → rightNeutralityℤ* x;
  -- Proof for associativity.
  associativity = λ {x} {y} {z} → associativityℤ* x y {z} }

-- Multiplication with pos 1 is a commutative monoid.
ℤmultiplicationIsCommMonoid : IsCommMonoidℤ (pos 1) (idℤ) (_*_)
ℤmultiplicationIsCommMonoid = record {
  -- Proof for monoid
  isMonoidℤ = ℤmultiplicationIsMonoid;
  -- Proof for commutativity.
  commutativity = λ {x} {y} → commutativityℤ* x {y}}
