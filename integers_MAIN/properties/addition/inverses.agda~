module integers_MAIN.properties.addition.inverses where

open import natural_numbers.definition

open import predicate_logic.definitions
open import predicate_logic.properties

open import integers_MAIN.definition
open import integers_MAIN.operations
open import integers_MAIN.properties.lemmas.incr_decr
open import integers_MAIN.properties.lemmas.incr_decr_idZ


-- Property: Left Additive Inverse
leftAdditiveInverseℤ+ : (x : ℤ) → ((negateℤ x) + x) ≡ pos zero
leftAdditiveInverseℤ+ (pos zero) = refl
leftAdditiveInverseℤ+ (pos (suc zero)) = refl
leftAdditiveInverseℤ+ (pos (suc (suc x))) = propertyTransitivity (decr[a+b]≡a+decr[b] (neg (suc x)) {pos (suc (suc x))}) (leftAdditiveInverseℤ+ (pos (suc x)))
leftAdditiveInverseℤ+ (neg zero) = refl
leftAdditiveInverseℤ+ (neg (suc x)) = propertyTransitivity (propertySymmetry (addℤ→incrℤ (x) {zero})) (leftAdditiveInverseℤ+ (neg x))
