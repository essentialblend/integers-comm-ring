module integers_MAIN.properties.multiplication.associativity where

open import natural_numbers.definition
open import natural_numbers.operations renaming (_+_ to _ℕ+_; _*_ to _*ℕ_)


open import predicate_logic.definitions
open import predicate_logic.properties

open import integers_MAIN.definition
open import integers_MAIN.operations

open import integers_MAIN.properties.addition.neutralities

open import integers_MAIN.properties.lemmas.incr_decr
open import integers_MAIN.properties.lemmas.incr_decr_idZ
open import integers_MAIN.properties.lemmas.idZ


open import integers_MAIN.properties.distributive_laws

-- Lemmas for associativity of multiplication

-- a)
negIdℤIdℤ≡IdℤnegIdℤ+ : (a : ℤ) → negateℤ (idℤ (a)) ≡ idℤ (negateℤ (a))
negIdℤIdℤ≡IdℤnegIdℤ+ (pos a) = idx1-2 (neg a)
negIdℤIdℤ≡IdℤnegIdℤ+ (neg zero) = refl
negIdℤIdℤ≡IdℤnegIdℤ+ (neg (suc a)) = refl

-- b)
negIdℤneg≡pos : (b : ℕ) → negateℤ (idℤ (neg b)) ≡ pos b
negIdℤneg≡pos zero = refl
negIdℤneg≡pos (suc b) = refl

-- c)
negℤ[a*b]≡[negℤa]*b : (a : ℤ) {b : ℤ} → negateℤ (a * b) ≡ ((negateℤ a) * b)
negℤ[a*b]≡[negℤa]*b (pos zero) = refl
negℤ[a*b]≡[negℤa]*b (pos (suc zero)) {b} = propertyTransitivity (negateℤ[x+y]≡negℤx+negℤy b {pos zero}) (congruence (negateℤ b +_) (negℤ[a*b]≡[negℤa]*b (pos (zero)) {b}))
negℤ[a*b]≡[negℤa]*b (pos (suc (suc a))) {b} = propertyTransitivity (negateℤ[x+y]≡negℤx+negℤy b {b + (pos a * b)}) (congruence (negateℤ b +_) (negℤ[a*b]≡[negℤa]*b (pos (suc (a))) {b}))
negℤ[a*b]≡[negℤa]*b (neg zero) {b} = refl
negℤ[a*b]≡[negℤa]*b (neg (suc a)) {pos b} = propertyTransitivity (propertyTransitivity (negateℤ[x+y]≡negℤx+negℤy (idℤ (neg b)) {neg a * pos b}) (congruence (_+ negateℤ (neg a * pos b)) (negIdℤneg≡pos b))) (congruence (pos b +_) (negℤ[a*b]≡[negℤa]*b (neg (a)) {pos b}))
negℤ[a*b]≡[negℤa]*b (neg (suc a)) {neg zero} = propertyTransitivity (negIdℤIdℤ≡IdℤnegIdℤ+ (neg a * neg zero)) (congruence idℤ (negℤ[a*b]≡[negℤa]*b (neg (a)) {neg zero}))
negℤ[a*b]≡[negℤa]*b (neg (suc a)) {neg (suc b)} = propertyTransitivity (negateℤ[x+y]≡negℤx+negℤy (pos (suc b)) {neg a * neg (suc b)}) (congruence (neg (suc b) +_) (negℤ[a*b]≡[negℤa]*b (neg (a)) {neg (suc b)}))


-- Property: ℤ multiplication is associative
associativityℤ* : (x y : ℤ) {z : ℤ} → ((x * y) * z) ≡ (x * (y * z))
associativityℤ* (pos zero) y = refl
associativityℤ* (pos (suc x)) y {z} = propertyTransitivity (rightDistributivityℤ (y) (pos x * y) {z}) (congruence ((y * z) +_ ) (associativityℤ* (pos (x)) y {z}))
associativityℤ* (neg zero) y = refl
associativityℤ* (neg (suc x)) y {z} = propertyTransitivity (propertyTransitivity (rightDistributivityℤ (negateℤ y) (neg x * y) {z}) (congruence (_+ ((neg x * y) * z)) (propertySymmetry (negℤ[a*b]≡[negℤa]*b y {z})))) (congruence (negateℤ (y * z) +_) (associativityℤ* (neg (x)) y {z}))
